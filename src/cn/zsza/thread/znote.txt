进程：
    操作系统正在执行的程序
    javac Hell.java 会启动javac.exe
    java Hello 会启动java.exe
    系统进行资源分配和调度的基本单位，每个进程都有它自己的内存空间和系统资源。
    线程依赖于进程而存在的。
    启动JVM，相当于启动了一个应用程序，也就是启动了一个进程，该进程会自动启动一个“主线程”，然后
    主线程去调用某个类的main方法，所以main方法运行在主线程中。
线程：
    每个进程执行都有一个执行顺序
    一个进程内，可以执行多个任务，每个任务可以看作是单个线程。
    start方法：启动线程，然后再由jvm去调用该线程的run()方法
    IllegalThreadStateException：
      一个线程只能开启一次，my.start();
单线程：
   程序只有一条执行路径
多线程：
   程序有多条执行路径
线程调度的两种模型：
   1、分时调度模型，所有线程轮流使用CPU的使用权，平均分配每个线程占用CPU时间片
   2、抢占调度模型，优先级高的线程使用CPU，获得时间片会多一些
   线程优先级仅仅表示线程获取CPU时间片的几率
IllegalArgumentException：非法参数异常
线程默认优先级为5
线程中断：d5.interrupt();
创建线程另一种方法：实现Runnable接口
CPU的每一次执行必须是一个原子性操作
    ticke--,先是把ticket做减减操作，然后再赋值

同步锁的对象为任意对象
对同步方法进行加锁，synchronized关键字放在修饰符后面
Java 中实现多线程有两种方法：继承 Thread 类、实现 Runnable 接口，
在程序开发中只要是多线程，肯定永远以实现 Runnable 接口为主，
因为实现 Runnable 接口相比继承 Thread 类有如下优势：
   可以避免由于 Java 的单继承特性而带来的局限；
   增强程序的健壮性，代码能够被多个线程共享，代码与数据是独立的；
   适合多个相同程序代码的线程区处理同一资源的情况。

