public void  implicitUseStringBuilder(String[] values) {
   String result = "";
   for (int i = 0 ; i < values.length; i ++) {
      result += values[i];
   }
   System.out.println(result);
}
// 上面代码中，使用javac编译，使用javap查看。循环中会多次隐式创建StringBuilder对象
// 下面代码则不会
public void explicitUseStringBuider(String[] values) {
   StringBuilder result = new StringBuilder();
   for (int i = 0; i < values.length; i ++) {
      result.append(values[i]);
   }
}
反编译后：
  s = s + rand.nextInt(1000) + " ";
   s = (new StringBuilder(String.valueOf(s))).append(rand.nextInt(1000)).append(" ").toString();

   public class TestString {
       public static void main(String[] args) {
           String s1 = "Monday";
           String s2 = new String("Monday");
           s2 = s2.intern();
           if (s1 == s2){
               System.out.println("s1 == s2");
           }else{
               System.out.println("s1 != s2");
           }
           if (s1.equals(s2)){
               System.out.println("s1 equals s2");
           }else{
               System.out.println("s1 not equals s2");
           }
       }
   }
   原来，（java.lang.String的intern()方法"abc".intern()方法的返回值还是字符串"abc"，
   表面上看起来好像这个方法没什么用处。但实际上，它做了个小动作：
   检查字符串池里是否存在"abc"这么一个字符串，如果存在，就返回池里的字符串；
   如果不存在，该方法会把"abc"添加到字符串池中，然后再返回它的引用。

   String常量池问题的几个例子
   示例1：
   Java代码
   　　String s0="kvill";
   　　String s1="kvill";
   　　String s2="kv" + "ill";
   　　System.out.println( s0==s1 );
   　　System.out.println( s0==s2 );
   　　结果为：
   　　true
   　　true
   分析：首先，我们要知结果为道Java 会确保一个字符串常量只有一个拷贝。
     　　因为例子中的 s0和s1中的”kvill”都是字符串常量，它们在编译期就被确定了，所以s0==s1为true；
         而”kv”和”ill”也都是字符串常量，当一个字符串由多个字符串常量连接而成时，它自己肯定也是字符串常量，
         所以s2也同样在编译期就被解析为一个字符串常量，所以s2也是常量池中” kvill”的一个引用。
         所以我们得出s0==s1==s2；
   示例2：
   示例：
   　　Java代码
   　　String s0="kvill";
   　　String s1=new String("kvill");
   　　String s2="kv" + new String("ill");
   　　System.out.println( s0==s1 );
   　　System.out.println( s0==s2 );
   　　System.out.println( s1==s2 );
   　　结果为：
   　　false
   　　false
   　　false
   分析：用new String() 创建的字符串不是常量，不能在编译期就确定，
         所以new String() 创建的字符串不放入常量池中，它们有自己的地址空间。
         s0还是常量池 中"kvill”的引用，s1因为无法在编译期确定，所以是运行时创建的新对象”kvill”的引用，
         s2因为有后半部分 new String(”ill”)所以也无法在编译期确定，所以也是一个新创建对象”kvill”的应用;
         明白了这些也就知道为何得出此结果了。

   示例3：
   Java代码
   　　String a = "a1";
   　　String b = "a" + 1;
   　　System.out.println((a == b)); //result = true
          String a = "atrue";
   　　String b = "a" + "true";
   　　System.out.println((a == b)); //result = true
           String a = "a3.4";
   　　String b = "a" + 3.4;
   　　System.out.println((a == b)); //result = true
   分析：JVM对于字符串常量的"+"号连接，将程序编译期，JVM就将常量字符串的"+"连接优化为连接后的值，拿"a" + 1来说，
         经编译器优化后在class中就已经是a1。在编译期其字符串常量的值就确定下来，故上面程序最终的结果都为true。
   示例4：
   Java代码
   　　String a = "ab";
   　　String bb = "b";
   　　String b = "a" + bb;
   　　System.out.println((a == b)); //result = false
   分析：JVM对于字符串引用，由于在字符串的"+"连接中，有字符串引用存在，而引用的值在程序编译期是无法确定的，
         即"a" + bb无法被编译器优化，只有在程序运行期来动态分配并将连接后的新地址赋给b。所以上面程序的结果也就为false。
   示例5：
   Java代码
   　　String a = "ab";
   　　final String bb = "b";
   　　String b = "a" + bb;
   　　System.out.println((a == b)); //result = true
   分析：和4中唯一不同的是bb字符串加了final修饰，对于final修饰的变量，
        它在编译时被解析为常量值的一个本地拷贝存储到自己的常量池中或嵌入到它的字节码流中。
        所以此时的"a" + bb和"a" + "b"效果是一样的。故上面程序的结果为true。
   示例6：
   Java代码
   　　String a = "ab";
   　　final String bb = getBB();
   　　String b = "a" + bb;
   　　System.out.println((a == b)); //result = false
   　　private static String getBB() {  return "b";   }
   分析：JVM对于字符串引用bb，它的值在编译期无法确定，只有在程序运行期调用方法后，
         将方法的返回值和"a"来动态连接并分配地址为b，故上面程序的结果为false。

   通过上面例子可以得出得知：
   　　String  s  =  "a" + "b" + "c";
   　　就等价于String s = "abc";
   　　String  a  =  "a";
   　　String  b  =  "b";
   　　String  c  =  "c";
   　　String  s  =   a  +  b  +  c;
   　　这个就不一样了，最终结果等于：
   　　Java代码
   　　StringBuffer temp = new StringBuffer();
   　　temp.append(a).append(b).append(c);
   　　String s = temp.toString();